"use strict";(self.webpackChunkstudy_notes=self.webpackChunkstudy_notes||[]).push([[1970],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),p=o,m=d["".concat(i,".").concat(p)]||d[p]||h[p]||s;return n?a.createElement(m,r(r({ref:t},u),{},{components:n})):a.createElement(m,r({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4860:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return h}});var a=n(7462),o=n(3366),s=(n(7294),n(3905)),r=["components"],l={sidebar_position:5},i="JavaScript Review",c={unversionedId:"tutorial-extras/JavaScript review",id:"tutorial-extras/JavaScript review",title:"JavaScript Review",description:"Classes",source:"@site/docs/tutorial-extras/JavaScript review.md",sourceDirName:"tutorial-extras",slug:"/tutorial-extras/JavaScript review",permalink:"/studyNotes/docs/tutorial-extras/JavaScript review",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-extras/JavaScript review.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/studyNotes/docs/tutorial-extras/git"},next:{title:"Components",permalink:"/studyNotes/docs/My personal REACT notes/Setting up a project"}},u={},h=[{value:"Classes",id:"classes",level:2},{value:"Class Syntax",id:"class-syntax",level:2},{value:"Class declaration",id:"class-declaration",level:2},{value:"Class expressions",id:"class-expressions",level:2},{value:"Class body and method definitions",id:"class-body-and-method-definitions",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Instances",id:"instances",level:2},{value:"Subclassing with the keyword extends",id:"subclassing-with-the-keyword-extends",level:2},{value:"Conditionals",id:"conditionals",level:2},{value:"If statements",id:"if-statements",level:3},{value:"If, else statements",id:"if-else-statements",level:3},{value:"Comparison operators",id:"comparison-operators",level:2},{value:"Logical operators",id:"logical-operators",level:2},{value:"Truthy or Falsy",id:"truthy-or-falsy",level:2},{value:"The list of falsy values includes;",id:"the-list-of-falsy-values-includes",level:4},{value:"Ternary operator",id:"ternary-operator",level:2},{value:"In the code above;",id:"in-the-code-above",level:4},{value:"Else If Statements",id:"else-if-statements",level:2},{value:"Switch Keyword",id:"switch-keyword",level:2},{value:"Functions",id:"functions",level:2},{value:"Parameters and arguments",id:"parameters-and-arguments",level:3},{value:"Default parameters",id:"default-parameters",level:3},{value:"Helper functions",id:"helper-functions",level:3},{value:"Function Expressions",id:"function-expressions",level:3},{value:"Arrow functions",id:"arrow-functions",level:3},{value:"Concise Body Arrow Functions",id:"concise-body-arrow-functions",level:3},{value:"Scope",id:"scope",level:2},{value:"Global Scope",id:"global-scope",level:3},{value:"Block Scope",id:"block-scope",level:3},{value:"Scope pollution",id:"scope-pollution",level:3},{value:"Practicing Good Scoping",id:"practicing-good-scoping",level:3},{value:"Arrays",id:"arrays",level:2},{value:"Accessing Elements in an Array",id:"accessing-elements-in-an-array",level:3},{value:"Update Elements in an Array",id:"update-elements-in-an-array",level:3},{value:"Arrays in let or const",id:"arrays-in-let-or-const",level:3},{value:"The .length Property",id:"the-length-property",level:3},{value:"The .push() Method",id:"the-push-method",level:3},{value:"The .pop() Method",id:"the-pop-method",level:3},{value:"Other Methods available in JavaScript",id:"other-methods-available-in-javascript",level:3},{value:"Nested Arrays",id:"nested-arrays",level:3},{value:"Loops",id:"loops",level:2},{value:"For Loop",id:"for-loop",level:3},{value:"Looping in Reverse",id:"looping-in-reverse",level:3},{value:"Looping Through Arrays",id:"looping-through-arrays",level:3},{value:"Nested Loops",id:"nested-loops",level:3},{value:"While Loop",id:"while-loop",level:3},{value:"Do While Statements",id:"do-while-statements",level:3},{value:"The break Keyword",id:"the-break-keyword",level:3},{value:"Higher Order functions",id:"higher-order-functions",level:2},{value:"Functions as Data",id:"functions-as-data",level:3},{value:"Functions as Parameters",id:"functions-as-parameters",level:3},{value:"Iterators",id:"iterators",level:2},{value:".forEach() method",id:"foreach-method",level:3},{value:".map() method",id:"map-method",level:3},{value:".filter method",id:"filter-method",level:3},{value:".findIndex method",id:"findindex-method",level:3},{value:".reduce method",id:"reduce-method",level:3},{value:"Review for Iterators",id:"review-for-iterators",level:3},{value:"Objects",id:"objects",level:2},{value:"Creating object literals",id:"creating-object-literals",level:3},{value:"Accessing object properties",id:"accessing-object-properties",level:3},{value:"Property Assignment",id:"property-assignment",level:3},{value:"Methods",id:"methods",level:3},{value:"Nested Objects",id:"nested-objects",level:3},{value:"Pass by reference",id:"pass-by-reference",level:3},{value:"Looping through objects",id:"looping-through-objects",level:3},{value:"Advanced objects",id:"advanced-objects",level:2},{value:"Object literals for objects.",id:"object-literals-for-objects",level:3},{value:"Factory functions for objects",id:"factory-functions-for-objects",level:3},{value:"Constructor functions for objects",id:"constructor-functions-for-objects",level:3},{value:"this keyword",id:"this-keyword",level:3},{value:"Privacy in objects",id:"privacy-in-objects",level:3},{value:"Getters",id:"getters",level:3},{value:"Advantages of using getter methods",id:"advantages-of-using-getter-methods",level:3},{value:"Setters",id:"setters",level:3}],d={toc:h};function p(e){var t=e.components,n=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"javascript-review"},"JavaScript Review"),(0,s.kt)("h2",{id:"classes"},"Classes"),(0,s.kt)("p",null,"Classes are tools that are used by developers to create similar objects. They are useful in debugging and maintaining code and helps in avoiding code repetitions."),(0,s.kt)("p",null,"There are similarities between the class and object syntax in JavaScript except that classes use the constructor method and objects do not. JavaScript calls the constructor method everytime it creates a new instance of a class."),(0,s.kt)("p",null,"It is best practice to capitalize and CamelCase class names."),(0,s.kt)("h2",{id:"class-syntax"},"Class Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"class ExampleOfClass {\n  constructor(name, department){\n      this.name = name;\n      this.department = department;\n  }\n}\n")),(0,s.kt)("p",null,"Classes are a template for creating objects, they encapsulate data with code to work on the data."),(0,s.kt)("h2",{id:"class-declaration"},"Class declaration"),(0,s.kt)("p",null,"To declare a class, you use class keyword with the name of the class. Example below;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"class Rectangle {\n  constructor (height, width){\n      this.height = height;\n      this.width = width;\n  }\n}\n")),(0,s.kt)("p",null,"It is important to remember that classes must be defined before they can be constructed."),(0,s.kt)("h2",{id:"class-expressions"},"Class expressions"),(0,s.kt)("p",null,"This is another way to define a class. Class expressions can be named or unnamed. The name given to a named class expression is local to the class's body and it can be accessed via the name property. Example below;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// unnamed\nlet Rectangle = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\nconsole.log(Rectangle.name);\n// output: "Rectangle"\n\n// named\nlet Rectangle = class Rectangle2 {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\nconsole.log(Rectangle.name);\n// output: "Rectangle2"\n')),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("strong",{parentName:"p"},"Class Expressions")," must be declared before they can be used."))),(0,s.kt)("h2",{id:"class-body-and-method-definitions"},"Class body and method definitions"),(0,s.kt)("p",null,"The body of a class is the part in curly braces, and this is where we define the class members like methods or constructors."),(0,s.kt)("p",null,"The body of the class is executed in strict mode and code written here is subject to stict syntax for increased perfomance and some keywords are reserved for future versions of ECMAscript."),(0,s.kt)("h2",{id:"constructor"},"Constructor"),(0,s.kt)("p",null,"The constructor method is a special method that is used for creating and initilizing an object created with a class. There can only be one method with the name constructor in a class, otherwise an error will be thrown."),(0,s.kt)("p",null,"The super keyword can be used to call the constructor of the super class."),(0,s.kt)("p",null,"JavaScript invokes the constructor method everytime we create a new instance. The constructor method accepts one argument."),(0,s.kt)("p",null,"Inside the constructor method we use the this keyword. 'this' can refer to an instance of that class."),(0,s.kt)("h2",{id:"instances"},"Instances"),(0,s.kt)("p",null,"Instances are objects that contain the property names and methods of a class, but with unique property values."),(0,s.kt)("p",null,"We use the 'new' keyword to generate a new instance of a class. The 'new' keyword calls the constructor method 'constructor()' runs the code inside of it, and then returns the new instance."),(0,s.kt)("h2",{id:"subclassing-with-the-keyword-extends"},"Subclassing with the keyword extends"),(0,s.kt)("p",null,"The keyword extends is used in class declarations or class expressions to create a class as a child of another class. Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"class animal {\n  constructor (name) {\n    this.name = name;\n  }\n  \n  speak () {\n    console.log(`${this.name} makes a noise.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor (name) {\n    super(name); // call the super class constructor and pass in the name parameter.\n  }\n\n  speak () {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nlet d = new Dog('Buffie');\nd.speak(); // Buffie barks.\n")),(0,s.kt)("p",null,"If there is a constructor present in the subclass, it needs to first call super() before using 'this'."),(0,s.kt)("p",null,"We can also extend traditional function based classes. Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"function Animal (name) {\n  this.name = name\n}\n\nAnimal.prototype.speak = function() {\n  console.log(`${this.name} makes a noise.`);\n}\n\nclass Dog extends Animal {\n  speak(){\n    console.log(`${this.name} barks.`);\n  }\n}\n\nlet d = new Dog('Buffie');\nd.speak(); // Buffie barks.\n")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Classes cannot extend regular non-constructible objects. If we want to inherit from a regular object we can instead use Object.setPrototypeOf():"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const Animal = {\n  speak(){\n    console.log(`${this.name} makes a noise.`);\n  }\n};\n\nclass Dog {\n  constuructor (name) {\n    this.name = name;\n  }\n}\n// if we do not do this we will get a TypeError when we invoke speak \nObject.setPrototypeOf(Dog.prototype, Animal);\nlet d = new Dog('Buffie');\nd.speak(); // Buffie makes a noise.\n")),(0,s.kt)("h2",{id:"conditionals"},"Conditionals"),(0,s.kt)("h3",{id:"if-statements"},"If statements"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"if (true){\n  console.log('This message will print.');\n}\n")),(0,s.kt)("p",null,"The if keyword is followed by parentheses which is followed by a code block or block statement indicated in curly braces. If the condition in the parentheses evaluates to true then the code in the block is executed otherwise if it is false it is not executed."),(0,s.kt)("h3",{id:"if-else-statements"},"If, else statements"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"if (false) {\n  console.log('The code in this block will not run.');\n} else {\n  console.log('But the code in this block will!');\n}\n")),(0,s.kt)("p",null,'The code above will print "But the code in this block will!".'),(0,s.kt)("p",null,'The code above uses the "else" keyword following the code block of the if statement and curly braces with the logic in it. The code inside the else statement block will execute if the if statement code block evaluates to false.'),(0,s.kt)("p",null,"if - else statements allow us to automate solutions to yes-or-no questions, also known as binary decisions."),(0,s.kt)("h2",{id:"comparison-operators"},"Comparison operators"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Less than: <"),(0,s.kt)("li",{parentName:"ul"},"Greater than: >"),(0,s.kt)("li",{parentName:"ul"},"Less than or equal to: <="),(0,s.kt)("li",{parentName:"ul"},"Greater than or equal to: >="),(0,s.kt)("li",{parentName:"ul"},"Is equal to: ==="),(0,s.kt)("li",{parentName:"ul"},"Is not equal to: !==")),(0,s.kt)("h2",{id:"logical-operators"},"Logical operators"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The and operator (&&). When we use the && operator, we are checking that two things are true"),(0,s.kt)("li",{parentName:"ul"},"The or operator (||). "),(0,s.kt)("li",{parentName:"ul"},"The not operator, otherwise known as the bang operator (!). The ! not operator reverses, or negates, the value of a boolean. Essentially, the ! operator will either take a true value and pass back false, or it will take a false value and pass back true.")),(0,s.kt)("h2",{id:"truthy-or-falsy"},"Truthy or Falsy"),(0,s.kt)("h4",{id:"the-list-of-falsy-values-includes"},"The list of falsy values includes;"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"0"),(0,s.kt)("li",{parentName:"ul"},"Empty strings like \"\" or ''"),(0,s.kt)("li",{parentName:"ul"},"null which represent when there is no value at all"),(0,s.kt)("li",{parentName:"ul"},"undefined which represent when a declared variable lacks a value"),(0,s.kt)("li",{parentName:"ul"},"NaN, or Not a Number")),(0,s.kt)("h2",{id:"ternary-operator"},"Ternary operator"),(0,s.kt)("p",null,"Ternary operators are used to simplify if - else statements."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let isNightTime = true;\n \nif (isNightTime) {\n  console.log('Turn on the lights!');\n} else {\n  console.log('Turn off the lights!');\n}\n")),(0,s.kt)("p",null,"The code above can also be written as follows; "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');\n")),(0,s.kt)("h4",{id:"in-the-code-above"},"In the code above;"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The condition, isNightTime, is provided before the ?."),(0,s.kt)("li",{parentName:"ul"},"Two expressions follow the ? and are separated by a colon :."),(0,s.kt)("li",{parentName:"ul"},"If the condition evaluates to true, the first expression executes."),(0,s.kt)("li",{parentName:"ul"},"If the condition evaluates to false, the second expression executes.")),(0,s.kt)("h2",{id:"else-if-statements"},"Else If Statements"),(0,s.kt)("p",null,"We can also add an else if statement if an else statement does not evaluate to true.\nExample;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let stopLight = 'yellow';\n \nif (stopLight === 'red') {\n  console.log('Stop!');\n} else if (stopLight === 'yellow') {\n  console.log('Slow down.');\n} else if (stopLight === 'green') {\n  console.log('Go!');\n} else {\n  console.log('Caution, unknown!');\n}\n")),(0,s.kt)("p",null,"In the code above the code will be executed depending on the value of variable stopLight. "),(0,s.kt)("h2",{id:"switch-keyword"},"Switch Keyword"),(0,s.kt)("p",null,"A switch statment creates an alternative syntax for a long if else statement to make it easier to read and write."),(0,s.kt)("p",null,"The switch keyword is used and initiate the code and is followed by parantheses, which contains the value which each case is going to evaluate. In the code block which is surrounded by curly braces {}, are the conditions that are going to be evaulated. The case keyword is used to make the check the values that are evaluated and if the values evaluate to truthy the code is executed, otherwise the program moves to the next line and check again what is the case. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let groceryItem = 'papaya';\n \nswitch (groceryItem) {\n  case 'tomato':\n    console.log('Tomatoes are $0.49');\n    break;\n  case 'lime':\n    console.log('Limes are $1.49');\n    break;\n  case 'papaya':\n    console.log('Papayas are $1.29');\n    break;\n  default:\n    console.log('Invalid item');\n    break;\n    // prints 'Papayas are $1.29'\n}\n")),(0,s.kt)("h2",{id:"functions"},"Functions"),(0,s.kt)("p",null,"A function declaration consists of "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The function keyword."),(0,s.kt)("li",{parentName:"ul"},"The name of the function, or its identifier, followed by parentheses."),(0,s.kt)("li",{parentName:"ul"},"A function body, or the block of statements required to perform a specific task, enclosed in the function\u2019s curly brackets, { }.")),(0,s.kt)("p",null,"Example of a function declaration;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"function name (){\n  console.log('Hello World');\n}\n")),(0,s.kt)("p",null,"We call a function by writing the name of the functions and paranthesis as shown below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"name();\n")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"  The hoisting feature in JavaScript allows access to function declarations before they have been defined. This is generally not considered good practice, but it's possible to come across it."))),(0,s.kt)("p",null,"Example of hoisiting;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"greetWorld(); // Output: Hello, World!\n \nfunction greetWorld() {\n  console.log('Hello, World!');\n}\n")),(0,s.kt)("p",null,"This function call executes the function body, or all of the statements between the curly braces in the function declaration. Functions can be called as many times as needed."),(0,s.kt)("h3",{id:"parameters-and-arguments"},"Parameters and arguments"),(0,s.kt)("p",null,"Functions can take inputs and use the inputs to perform a task. Parameters allow functions to accept input(s) and perform a task using the input(s). The values that are passed to the function when it is called are called arguments. Arguments can be passed to the function as values or variables."),(0,s.kt)("p",null,"Example;   "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const rectWidth = 7;\nconst rectHeight = 5;\n\nfunction calculateArea (rectWidth, rectHeight) {\n    console.log( rectWidth * rectHeight );\n}\n// or it could be as follows below\n\nconst rectWidth = 7;\nconst rectHeight = 5;\n\nfunction calculateArea (rectWidth, rectHeight){\n    return rectWidth * rectHeight;\n}\n")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"We use the 'return' keyword to capture the results of the code executed in the function body. The return keyword is powerful because it allows functions to produce an output. We can then save the output to a variable for later use."))),(0,s.kt)("h3",{id:"default-parameters"},"Default parameters"),(0,s.kt)("p",null,"One of the features added in ES6 is the ability to use default parameters. Default parameters allow parameters to have a predetermined value in case there is no argument passed into the function or if the argument is undefined when called."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"function greeting (name = 'stranger') {\n  console.log(`Hello, ${name}!`)\n}\n \ngreeting('Nick') // Output: Hello, Nick!\ngreeting() // Output: Hello, stranger!\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"In the example above, we used the = operator to assign the parameter name a default value of 'stranger'. This is useful to have in case we ever want to include a non-personalized default greeting!")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"When the code calls greeting('Nick') the value of the argument is passed in and, 'Nick', will override the default parameter of 'stranger' to log 'Hello, Nick!' to the console.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"When there isn\u2019t an argument passed into greeting(), the default value of 'stranger' is used, and 'Hello, stranger!' is logged to the console."))),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"By using a default parameter, we account for situations when an argument isn\u2019t passed into a function that is expecting an argument."))),(0,s.kt)("h3",{id:"helper-functions"},"Helper functions"),(0,s.kt)("p",null,"We can also use the return value of a function inside another function. These functions being called within another function are often referred to as helper functions. Since each function is carrying out a specific task, it makes our code easier to read and debug if necessary."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"function monitorCount(rows, columns) {\n  return rows * columns;\n};\n\nfunction costOfMonitors(rows, columns){\n  return monitorCount(rows, columns) * 200\n};\n\nconst totalCost = costOfMonitors(5,4);\n\nconsole.log(totalCost);\n\n// The code above prints 4000.\n")),(0,s.kt)("h3",{id:"function-expressions"},"Function Expressions"),(0,s.kt)("p",null,"The other way to define functions is to use function expressions. In a function expression, the function name is usually omitted. The function without a name is called an anonymous function. A function expression is stored in a variable to refer to it."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const plantNeedsWater = function(day){\n  if (day === 'Wednesday') {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(plantNeedsWater('Tuesday'));\n\n// The code above prints false.\n")),(0,s.kt)("p",null,"To invoke a function expression (an anonymous function), we write the name of the variable the function is stored in and followed by parentheses enclosing arguments being passed into the function."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Unlike function declarations,  function expressions cannot be hoisted. So they cannot be called before they are defined."))),(0,s.kt)("h3",{id:"arrow-functions"},"Arrow functions"),(0,s.kt)("p",null,"ES6 introduced arrow function syntax, a shorter way to write functions by using the special \u201cfat arrow\u201d () => notation."),(0,s.kt)("p",null,"Arrow functions remove the need to type out the keyword function every time you need to create a function. Instead, you first include the parameters inside the ( ) and then add an arrow => that points to the function body surrounded in { }."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const rectangleArea = (width, height) => {\n  let area = width * height;\n  return area;\n};\n")),(0,s.kt)("h3",{id:"concise-body-arrow-functions"},"Concise Body Arrow Functions"),(0,s.kt)("p",null,"These is the most condensed form of functions provided by ES6. There are different ways to refactor arrow function syntax. A look at a few."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Functions that take only a single parameter do not need that parameter to be enclosed in parentheses. However, if a function takes zero or multiple parameters, parentheses are required.")),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"//Zero paremeters will look like the code below,\nconst functionName = () => {};\n\n//One parameter will look like the code below,\nconst functionName = ParamOne => {};\n\n// Two or more parameters will look like the code below,\nconst functionName = (paramOne, paramTwo) => {};\n")),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"A function body composed of a single-line block does not need curly braces. Without the curly braces, whatever that line evaluates will be automatically returned. The contents of the block should immediately follow the arrow => and the return keyword can be removed. This is referred to as implicit return.")),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Single line block code looks a follows,\nconst sumNumbers = number => number + number;\n\n// Multiline block code looks a follows,\nconst sumNumbers = number => {\n  const sum = number + number;\n  return sum;\n};\n")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("strong",{parentName:"p"},"Implicit return")," is when the contents of a function body follow the fat arrow =>, and the 'return' keyword is omitted."))),(0,s.kt)("h2",{id:"scope"},"Scope"),(0,s.kt)("p",null,"Variables can exist inside or outside blocks"),(0,s.kt)("h3",{id:"global-scope"},"Global Scope"),(0,s.kt)("p",null,"Global variables, variables are the ones declared outside of blocks. They can be accessed by any code in the program including code inside of blocks."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let satellite = 'The Moon'\nlet galaxy = 'The Milky Way'\nlet stars = 'North Star'\n\nfunction callMyNightSky(){\n  return 'Night Sky: ' + satellite + ', ' + stars + ', and ' + galaxy;\n}\n\nconsole.log(callMyNightSky());\n\n// The code above will print: Night Sky: The Moon, North Star, and The Milky Way\n// Notice how satellite, galaxy, and stars are global variables that are being accessed from the in the function.\n")),(0,s.kt)("h3",{id:"block-scope"},"Block Scope"),(0,s.kt)("p",null,"When code is defined in block scope it can only be accessed within the curly braces {}. It is called a block scope variable because it is only available to the lines of code within that block. They are also called local variables."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const logSkyColor = () => {\n  let color = 'blue'; \n  console.log(color); // blue \n};\n \nlogSkyColor(); // blue \nconsole.log(color); // ReferenceError\n")),(0,s.kt)("p",null,"In the code above; "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We define a function logSkyColor()."),(0,s.kt)("li",{parentName:"ul"},"Within the function, the color variable is only available within the curly braces of the function."),(0,s.kt)("li",{parentName:"ul"},"If we try to log the same variable outside the function, it throws a ReferenceError.")),(0,s.kt)("h3",{id:"scope-pollution"},"Scope pollution"),(0,s.kt)("p",null,"Having too many global variable can cause problems in the program. When we declare global variables, they go to the global namespace. The global namespace allows the variables to be accessible from anywhere in the program. These variables remain there until the program finishes which means our global namespace can fill up really quickly."),(0,s.kt)("p",null,"Scope pollution is when we have too many global variables that exist in the global namespace, or when we reuse variables across different scopes."),(0,s.kt)("p",null," Scope pollution makes it difficult to keep track of our different variables and sets us up for potential accidents. For example, globally scoped variables can collide with other variables that are more locally scoped, causing unexpected behavior in our code."),(0,s.kt)("p",null," Example of scope pollution;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let num = 50;\n\nconst logNum = () => {\n num = 100; // Take note of this line of code\n console.log(num);\n};\n\nlogNum(); // Prints 100\nconsole.log(num); // Prints 100\n")),(0,s.kt)("p",null," ",(0,s.kt)("strong",{parentName:"p"},"What is happening in the code above?")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We have a variable num."),(0,s.kt)("li",{parentName:"ul"},"Inside the function body of logNum(), we want to declare a new variable but forgot to use the let keyword."),(0,s.kt)("li",{parentName:"ul"},"When we call logNum(), num gets reassigned to 100."),(0,s.kt)("li",{parentName:"ul"},"The reassignment inside logNum() affects the global variable num."),(0,s.kt)("li",{parentName:"ul"},"Even though the reassignment is allowed and we won\u2019t get an error, if we decided to use num later, we\u2019ll unknowingly use the new value of num.")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"While it\u2019s important to know what global scope is, it\u2019s best practice to not define variables in the global scope."))),(0,s.kt)("h3",{id:"practicing-good-scoping"},"Practicing Good Scoping"),(0,s.kt)("p",null,"Block scope is a powerful tool in JavaScript, since it allows us to define variables with precision, and not pollute the global namespace. If a variable does not need to exist outside a block\u2014 it shouldn\u2019t!"),(0,s.kt)("p",null,"Tightly scoping your variables will greatly improve your code in several ways. "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It will make your code more legible since the blocks will organize your code into discrete sections."),(0,s.kt)("li",{parentName:"ul"},"It makes your code more understandable since it clarifies which variables are associated with different parts of the program rather than having to keep track of them line after line!"),(0,s.kt)("li",{parentName:"ul"},"It\u2019s easier to maintain your code, since your code will be modular."),(0,s.kt)("li",{parentName:"ul"},"It will save memory in your code because it will cease to exist after the block finishes running.")),(0,s.kt)("h2",{id:"arrays"},"Arrays"),(0,s.kt)("p",null,"Arrays are JavaScript\u2019s way of making lists.\nAn array literal creates an array by wrapping items in square brackets [].\nEach content item inside an array is called an element.\nWe can also save an array to a variable."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const hobbies = [ 'Basketball ','Programming ','Swimming ']; \nconsole.log(hobbies);\n")),(0,s.kt)("h3",{id:"accessing-elements-in-an-array"},"Accessing Elements in an Array"),(0,s.kt)("p",null,"Each element in an array has a numbered position known as its index.\nArrays in JavaScript are zero-indexed, meaning the positions start counting from 0 rather than 1.\nThe first item in an array will be at position 0 or also called index 0.\nWe use bracket notation, [] with the index after the name of the array to access the element."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const famousSayings = ['Fortune favors the brave.', 'A joke is a very serious thing.', 'Where there is love there is life.'];\nconst listItem = famousSayings[0];\nconsole.log(listItem);\nconsole.log(famousSayings[2]);\nconsole.log(famousSayings[3]);\n\n// prints Fortune favors the brave.\n//Where there is love there is life.\n//undefined : 'Because there is no element with index [3].'\n")),(0,s.kt)("h3",{id:"update-elements-in-an-array"},"Update Elements in an Array"),(0,s.kt)("p",null,"Once you have access to an element in an array, you can update its value."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let groceryList = ['bread', 'tomatoes', 'milk'];\ngroceryList[1] = 'avocados'\n\nconsole.log (groceryList[1]);\n// Prints avocados. 'Because the element in index [1] was changed from bread to avacodos.'\n")),(0,s.kt)("h3",{id:"arrays-in-let-or-const"},"Arrays in let or const"),(0,s.kt)("p",null,"Variables declared using the const keyword cannot be reassigned but elements in an array declared with const remain mutable. Meaning that we can change the contents of a const array, but cannot reassign a new array or a different value."),(0,s.kt)("h3",{id:"the-length-property"},"The .length Property"),(0,s.kt)("p",null,"One of an array\u2019s built-in properties is length and it returns the number of items in the array. We access the .length property just like we do with strings."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const objectives = ['Learn a new languages', 'Read 52 books', 'Run a marathon'];\nconsole.log(objectives.length);\n\n// Prints 3 to the console.\n")),(0,s.kt)("h3",{id:"the-push-method"},"The .push() Method"),(0,s.kt)("p",null,"Methods are specifically called on arrays to make common tasks, like adding and removing elements, more straightforward.\nThe .push() method allows us to add items to the end of an array."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const chores = ['wash dishes', 'do laundry', 'take out trash'];\nchores.push('mop the floor', 'Iron my clothes');\n\nconsole.log(chores[4]);\n\n// Prints Iron my clothes.\n")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The .push() method changes, or mutates, an array. You might also see .push() referred to as a destructive array method since it changes the initial array."))),(0,s.kt)("h3",{id:"the-pop-method"},"The .pop() Method"),(0,s.kt)("p",null,"The .pop() method removes the last item of an array.\nIt does not take any arguments, it simply removes the last element of an array.\nThe method returns the value of the last element. For example, we can store the returned value in a variable for later use.\nThe .pop() method mutates the initial array."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const chores = ['wash dishes', 'do laundry', 'take out trash', 'cook dinner', 'mop floor'];\n\n\nchores.pop();\nconsole.log(chores);\n// Prints [ 'wash dishes', 'do laundry', 'take out trash', 'cook dinner' ]\n\n// Another example;\nconst newItemTracker = ['item 0', 'item 1', 'item 2'];\n \nconst removed = newItemTracker.pop();\n \nconsole.log(newItemTracker); \n// Output: [ 'item 0', 'item 1' ]\nconsole.log(removed);\n// Output: item 2\n// Above we can see that we stored the last item of the array in the variable called removed.\n")),(0,s.kt)("h3",{id:"other-methods-available-in-javascript"},"Other Methods available in JavaScript"),(0,s.kt)("p",null,"There are many other methods that are availabe in JavaScript some of them include .join(), .slice(), .splice(), .shift(), .unshift(), and .concat(). Using these built-in methods make it easier to do some common tasks when working with arrays."),(0,s.kt)("h3",{id:"nested-arrays"},"Nested Arrays"),(0,s.kt)("p",null,"Arrays can store other arrays and a nested array is formed when an array contains another array."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const numberClusters = [[1,2], [3,4], [5,6]];\nconst target = numberClusters[2][1];\n\nconsole.log(target);\n// In the example above, numberClusters variable has a nested array, we try to save the value of the array in index 2 and then the value of index 1 from inside the array. \n// The printed result is 6, which is now stored in target variable. \n")),(0,s.kt)("h2",{id:"loops"},"Loops"),(0,s.kt)("p",null,"Loops allow us to write efficient code that automates to make scalable, manageable programs. Loops iterate an action until a certain condition is met. When the condition is met the loop stops and the computer moves on to the next part of the program. "),(0,s.kt)("h3",{id:"for-loop"},"For Loop"),(0,s.kt)("p",null,"The typical for loop includes an iterator variable that usually appears in all three expressions. The iterator variable is initialized, checked against the stopping condition, and assigned a new value on each loop iteration."),(0,s.kt)("p",null,"A for loop contains three expressions separated by ; inside the parentheses:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"An initialization starts the loop and can also be used to declare the iterator variable."),(0,s.kt)("li",{parentName:"ol"},"A stopping condition is the condition that the iterator variable is evaluated against, if the condition evaluates to true the code block will run, and if it evaluates to false the code will stop."),(0,s.kt)("li",{parentName:"ol"},"An iteration statement is used to update the iterator variable on each loop.")),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"for (let counter = 5; counter < 11; counter++){\n  console.log(counter);\n}\n// Prints 5, 6, 7, 8, 9, 10\n")),(0,s.kt)("p",null,"In the code above the initialization on the for loop is 'let counter = 5' so the looping will start from 5. We can say that 'counter' is the iterator variable. The stopping condition is 'counter < 11' meaning that the loop will continue as long as the iterator variable is less than 11. The iteration statement is 'counter++' which means that the value of counter will be increased by one each time. The code block inside the curly braces will execute as long as the condition is not met. The point where the loop stops is called the stop condition. "),(0,s.kt)("h3",{id:"looping-in-reverse"},"Looping in Reverse"),(0,s.kt)("p",null,"To run a backward for loop, we must:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Set the iterator variable to the highest desired value in the initialization expression."),(0,s.kt)("li",{parentName:"ol"},"Set the stopping condition for when the iterator variable is less than the desired amount."),(0,s.kt)("li",{parentName:"ol"},"The iterator should decrease in intervals after each iteration.")),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"for (let counter = 3; counter >= 0; counter--){\n  console.log(counter);\n}\n// The loop above loops from 3 to 0\n")),(0,s.kt)("h3",{id:"looping-through-arrays"},"Looping Through Arrays"),(0,s.kt)("p",null,"To loop through each element in an array, a for loop should use the array\u2019s .length property in its condition."),(0,s.kt)("p",null,"Exxapmle;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const animals = ['Grizzly Bear', 'Sloth', 'Sea Lion'];\nfor (let i = 0; i < animals.length; i++){\n  console.log(animals[i]);\n}\n// Prints Grizzly Bear, Sloth, Sea Lion\n")),(0,s.kt)("p",null,"In the loop above, we\u2019ve named our iterator variable i. This is a variable naming convention you\u2019ll see in a lot of loops. When we use i to iterate through arrays we can think of it as being short-hand for the word index. Notice how our stopping condition checks that i is less than animals.length. Remember that arrays are zero-indexed, the index of the last element of an array is equivalent to the length of that array minus 1."),(0,s.kt)("p",null,"Example 2;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const vacationSpots = ['Bali', 'Paris', 'Tulum','LA'];\n\nfor (let i = 0; i < vacationSpots.length; i++){\n  console.log('I would love to visit '+ vacationSpots[i]);\n}\n/*Output of the code above:\nI would love to visit Bali\nI would love to visit Paris\nI would love to visit Tulum\nI would love to visit LA*/\n")),(0,s.kt)("h3",{id:"nested-loops"},"Nested Loops"),(0,s.kt)("p",null,"A loop that runs inside of another loop is called a nested loop. One of the main uses of a nested for loop is to compare the elements in the two arrays. For each round of the outer for loop, the inner for loop will run completely."),(0,s.kt)("p",null,"Example 1;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"for (i = 0; i < 3; i++) {\n  for (j = 0; j = 4; j++) {\n      console.log(i - j);\n  }\n}\n")),(0,s.kt)("p",null,"Example 2;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"for (let outer=0; outer < 2; outer += 1){\n  for (let inner = 0; inner < 3; inner += 1){\n      console.log(`${outer} - ${inner}`);\n  }\n}\n/* Output:\n0 - 0\n0 - 1\n0 - 2\n1 - 0\n1 - 1\n1 - 2 */\n")),(0,s.kt)("p",null,"The inner loop will run all it's iterations for each iteration of the outer loop."),(0,s.kt)("p",null,"Example 3"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const bobsFollowers = ['Jane', 'Daniel', 'Mona', 'Jack'];\nconst tinasFollowers = ['Lisa', 'Mona', 'Jane' ];\n\nconst mutualFollowers = [];\n\nfor (let i = 0; i < bobsFollowers.length; i++){\n  for(let j = 0; j < tinasFollowers.length; j++){\n\n   if (bobsFollowers[i] === tinasFollowers[j]){\n     mutualFollowers.push(tinasFollowers[j]);\n   }\n  }\n};\nconsole.log(mutualFollowers);\n// Prints [ 'Jane', 'Mona' ]\n")),(0,s.kt)("h3",{id:"while-loop"},"While Loop"),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// A for loop that prints 1, 2, and 3\nfor (let counterOne = 1; counterOne < 4; counterOne++){\n  console.log(counterOne);\n}\n \n// A while loop that prints 1, 2, and 3\nlet counterTwo = 1;\nwhile (counterTwo < 4) {\n  console.log(counterTwo);\n  counterTwo++;\n}\n")),(0,s.kt)("p",null,"In the example above, "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The counterTwo variable is declared before the loop. We can access it inside our while loop since it\u2019s in the global scope."),(0,s.kt)("li",{parentName:"ul"},"We start our loop with the keyword while followed by our stopping condition, or test condition. This will be evaluated before each round of the loop. While the condition evaluates to true, the block will continue to run. Once it evaluates to false the loop will stop."),(0,s.kt)("li",{parentName:"ul"},"Next, we have our loop\u2019s code block which prints counterTwo to the console and increments counterTwo.")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("strong",{parentName:"p"},"An infite loop")," is when a loop runs without stopping because the stop condition is not met, or in other words that the testing condition always evaluates to true and the loop never stops running. "))),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("strong",{parentName:"p"},"An infite loop")," can take up all of your computer\u2019s processing power potentially freezing your computer."))),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("h4",{parentName:"div",id:"infinite-loop-example"},"Infinite loop example"),(0,s.kt)("p",{parentName:"div"},"In our example of a while loop above, If we didn\u2019t increment counterTwo in our block, counterTwo would always have its initial value of '1'. That would mean the testing condition 'counterTwo < 4', would always evaluate to 'true' and our loop would never stop running!"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// An example of an infinite loop\nlet counterTwo = 1;\nwhile (counterTwo < 4) {\n  console.log(counterTwo);\n        //counterTwo++; If this part of the code is omitted it will become an infinite loop.\n}\n")),(0,s.kt)("p",null,"While loops are best used in situations where we want a loop to execute an undetermined number of times."),(0,s.kt)("h3",{id:"do-while-statements"},"Do While Statements"),(0,s.kt)("p",null,"A do...while statement says to do a task once and then keep doing it until a specified condition is no longer met."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let cupsOfSugarNeeded = 6;\nlet cupsAdded = 7;\n\ndo {\n cupsAdded++\n console.log(cupsAdded + ' cups were added') \n} while (cupsAdded < cupsOfSugarNeeded);\n// The code above will be executed once even though the condition executes to false.  \n")),(0,s.kt)("h3",{id:"the-break-keyword"},"The break Keyword"),(0,s.kt)("p",null,"The break keyword is used to stop the code from continuing to execute the loop even if the original stopping condition has not been met yet. It is added in the code block."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const rapperArray = ["Lil\' Kim", "Jay-Z", "Notorious B.I.G.", "Tupac"];\n\n// Write your code below\nfor (let i = 0; i < rapperArray.length; i++){\n  console.log(rapperArray[i]);\n  if (rapperArray[i] === \'Notorious B.I.G.\'){\n      break;\n  }\n}\nconsole.log("And if you don\'t know, now you know.");\n/* Output\nLil\' Kim\nJay-Z\nNotorious B.I.G.\nAnd if you don\'t know, now you know.\n*/\n')),(0,s.kt)("h2",{id:"higher-order-functions"},"Higher Order functions"),(0,s.kt)("h3",{id:"functions-as-data"},"Functions as Data"),(0,s.kt)("p",null,"JavaScript functions behave like any other data type in the language; we can assign functions to variables, and we can reassign them to new variables."),(0,s.kt)("p",null,"In JavaScript, functions are first class objects. This means that, like other objects you\u2019ve encountered, JavaScript functions can have properties and methods."),(0,s.kt)("p",null,"Since functions are a type of object, they have properties such as .length and .name, and methods such as .toString(). Functions are special because we can invoke them, but we can still treat them like any other type of data."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {\n  for(let i = 1; i <= 1000000; i++) {\n    if ( (2 + 2) != 4) {\n      console.log('Something has gone very wrong :( ');\n    }\n  }\n};\n\nconst isTwoPlusTwo = checkThatTwoPlusTwoEqualsFourAMillionTimes;\n\nisTwoPlusTwo();\n\nconsole.log(isTwoPlusTwo.name);\n// Prints checkThatTwoPlusTwoEqualsFourAMillionTimes as the name when we try to access the name property of the function.\n")),(0,s.kt)("h3",{id:"functions-as-parameters"},"Functions as Parameters"),(0,s.kt)("p",null,"As we alredy know a parameter is a placeholder for the data that gets passed into a function, Since functions can behave like any other type of data in JavaScript, functions can accept other functions as parameters."),(0,s.kt)("p",null,"A higher-order function is a function that either accepts functions as parameters, returns a function, or both!"),(0,s.kt)("p",null,"We call functions that get passed in as parameters callback functions. Callback functions get invoked during the execution of the higher-order function."),(0,s.kt)("p",null,"When we invoke a higher-order function, and pass another function in as an argument, we don\u2019t invoke the argument function. Invoking it would evaluate to passing in the return value of that function call. With callback functions, we pass in the function itself by typing the function name without the parentheses."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const addTwo = num => {\n  return num + 2;\n}\n\nconst checkConsistentOutput = (func, val) => {\n let checkA = val + 2;\n let checkB = func(val);\n  if ( checkA === checkB ){\n    return func(val);\n    \n  } else {\n    return "inconsistent results."\n  }\n}\n\nconsole.log(checkConsistentOutput(addTwo, 3));\n')),(0,s.kt)("h2",{id:"iterators"},"Iterators"),(0,s.kt)("p",null,"The built-in JavaScript array methods that help us iterate are called iteration methods, at times referred to as iterators. Iterators are methods called on arrays to manipulate elements and return values."),(0,s.kt)("h3",{id:"foreach-method"},".forEach() method"),(0,s.kt)("p",null,"The .forEach() will execute the same code for each element of an array."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const fruits = ['mango', 'papaya', 'pineapple', 'apple'];\n\n// Iterate over fruits below\n\nfruits.forEach(function(fruitToEat){\n  console.log(`I want to eat a ${fruitToEat}.`);\n});\n/* Output\nI want to eat a mango.\nI want to eat a papaya.\nI want to eat a pineapple.\nI want to eat a apple. */\n")),(0,s.kt)("p",null,"fruits.forEach() calls the forEach method on the fruits array. .forEach() takes an argument of callback function. Remember, a callback function is a function passed as an argument into another function. .forEach() loops through the array and executes the callback function for each element. During each execution, the current element is passed as an argument to the callback function. The return value for .forEach() will always be undefined."),(0,s.kt)("p",null,"We can also pass a callback for .forEach() by using arrow function syntax as shown below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"groceries.forEach(groceryItem => console.log(groceryItem));\n")),(0,s.kt)("p",null,"We can also define functions beforehand to be used a callback function as shown below."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"function printGrocery(element){\n  console.log(element);\n}\n \ngroceries.forEach(printGrocery);\n")),(0,s.kt)("p",null,"The above example uses a function declaration but you can also use a function expression or arrow function as well."),(0,s.kt)("p",null,"::: Note\nBecause developers have different stylistic preferences, it is important to know the different ways how to pass in callback functions as arguments in iterators.\n:::"),(0,s.kt)("h3",{id:"map-method"},".map() method"),(0,s.kt)("p",null,"When .map() is called on an array, it takes an argument of a callback function and returns a new array!  .map() works in a similar manner to .forEach()\u2014 the major difference is that .map() returns a new array."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich',\n 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];\n\n// New secretMessage array below\nconst secretMessage = animals.map(animals => animals[0]);\n\nconsole.log(secretMessage.join(''));\n\n\nconst bigNumbers = [100, 200, 300, 400, 500];\n\n// New smallNumbers array below\nconst smallNumbers = bigNumbers.map(bigNumbers => bigNumbers/100\n);\n\nconsole.log(smallNumbers);\n\n/* Prints\nHelloWorld\n[ 1, 2, 3, 4, 5 ]*/\n")),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"In the code above we used .map() method to create a new array that contains the first character of each string in the animals array, and saved the new array to a const variable named secretMessage.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"We used the .map() method to divide all the numbers in bigNumbers by 100, and saved the returned values to a variable declared with const called smallNumbers."))),(0,s.kt)("h3",{id:"filter-method"},".filter method"),(0,s.kt)("p",null,".filter() returns a new array. However, .filter() method returns an array of elements after filtering out certain elements from the original array. The callback function for the .filter() method should return true or false depending on the element that is passed to it. The elements that cause the callback function to return true are added to the new array.\nExample;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const words = ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; \n \nconst shortWords = words.filter(word => {\n  return word.length < 6;\n});\n\nconsole.log(words); // Output: ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; \nconsole.log(shortWords); // Output: ['chair', 'music', 'brick', 'pen', 'door']\n")),(0,s.kt)("p",null," The words array was not mutated, i.e. changed, and shortWords is a new array."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const randomNumbers = [375, 200, 3.14, 7, 13, 852];\n\n// Call .filter() on randomNumbers below\nconst smallNumbers = randomNumbers.filter(randomNumbers => randomNumbers < 250 );\n\nconsole.log(smallNumbers);\n\nconst favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];\n\n\n// Call .filter() on favoriteWords below\n\nconst longFavoriteWords = favoriteWords.filter(favoriteWords => favoriteWords.length > 7);\n\nconsole.log(longFavoriteWords);\n\n/*Output;\n[ 200, 3.14, 7, 13 ]\n[ 'nostalgia', 'hyperbole', 'esoteric' ]\n")),(0,s.kt)("h3",{id:"findindex-method"},".findIndex method"),(0,s.kt)("p",null,"Calling .findIndex() on an array will return the index of the first element that evaluates to true in the callback function.\nExample;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-JavaScript"},"const jumbledNums = [123, 25, 78, 5, 9]; \n \nconst lessThanTen = jumbledNums.findIndex(num => {\n  return num < 10;\n});\n\nconsole.log(lessThanTen); // Output: 3 \nconsole.log(jumbledNums[3]); // Output: 5\n")),(0,s.kt)("p",null,"In the code above;"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"jumbledNums is an array that contains elements that are numbers."),(0,s.kt)("li",{parentName:"ul"},"const lessThanTen = declares a new variable that stores the returned index number from invoking .findIndex()."),(0,s.kt)("li",{parentName:"ul"},"The callback function is an arrow function that has a single parameter, num. Each element in the jumbledNums array will be passed to this function as an argument."),(0,s.kt)("li",{parentName:"ul"},"num < 10; is the condition that elements are checked against. .findIndex() will return the index of the first element which evaluates to true for that condition.")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If there isn\u2019t a single element in the array that satisfies the condition in the callback, then .findIndex() will return -1."))),(0,s.kt)("p",null,"Example of when a no element in the array satisfies the condition;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const greaterThan1000 = jumbledNums.findIndex(num => {\n  return num > 1000;\n});\n \nconsole.log(greaterThan1000); // Output: -1\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const animals = ['hippo', 'tiger', 'lion', 'seal', 'cheetah', 'monkey', 'salamander', 'elephant'];\n\n\nconst foundAnimal = animals.findIndex(animals => {\n  return animals ==='tiger'\n});\n\nconsole.log(foundAnimal);\n\nconst startsWithS = animals.findIndex( animals => {\n  return animals[0] === 's' \n});\n\nconsole.log(startsWithS);\n\n// Output 1 and 3 \n")),(0,s.kt)("h3",{id:"reduce-method"},".reduce method"),(0,s.kt)("p",null,"The .reduce() method returns a single value after iterating through the elements of an array, thereby reducing the array."),(0,s.kt)("p",null,"The .reduce() method can also take an optional second parameter to set an initial value for accumulator (remember, the first argument is the callback function!)"),(0,s.kt)("p",null,"Example 1;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const numbers = [1, 2, 4, 10];\n \nconst summedNums = numbers.reduce((accumulator, currentValue) => {\n  return accumulator + currentValue\n}, 100)  // <- Second argument for .reduce()\n \nconsole.log(summedNums); // Output: 117\n")),(0,s.kt)("p",null,"Example 2;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const newNumbers = [1, 3, 5, 7];\n\nconst newSum = newNumbers.reduce(function(accumulator, currentValue) {\n  console.log('The value of accumulator: ', accumulator);\nconsole.log('The value of currentValue: ', currentValue);\n  return accumulator + currentValue\n}, 10);\n\nconsole.log(newSum);\n/* Output\nThe value of accumulator:  10\nThe value of currentValue:  1\nThe value of accumulator:  11\nThe value of currentValue:  3\nThe value of accumulator:  14\nThe value of currentValue:  5\nThe value of accumulator:  19\nThe value of currentValue:  7\n26*/\n")),(0,s.kt)("h3",{id:"review-for-iterators"},"Review for Iterators"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},".forEach() is used to execute the same code on every element in an array but does not change the array and returns undefined."),(0,s.kt)("li",{parentName:"ul"},".map() executes the same code on every element in an array and returns a new array with the updated elements."),(0,s.kt)("li",{parentName:"ul"},".filter() checks every element in an array to see if it meets certain criteria and returns a new array with the elements that return truthy for the criteria."),(0,s.kt)("li",{parentName:"ul"},".findIndex() returns the index of the first element of an array that satisfies a condition in the callback function. It returns -1 if none of the elements in the array satisfies the condition."),(0,s.kt)("li",{parentName:"ul"},".reduce() iterates through an array and takes the values of the elements and returns a single value."),(0,s.kt)("li",{parentName:"ul"},"All iterator methods take a callback function, which can be a pre-defined function, a function expression, or an arrow function.")),(0,s.kt)("h2",{id:"objects"},"Objects"),(0,s.kt)("h3",{id:"creating-object-literals"},"Creating object literals"),(0,s.kt)("p",null,"We use curly braces, {}, to designate an object literal. We fill an object with unordered data. This data is organized into key-value pairs. A key is like a variable name that points to a location in memory that holds a value. A key\u2019s value can be of any data type in the language including functions or other objects. "),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// An object literal with two key-value pairs\nlet spaceship = {\n  'Fuel Type': 'diesel',\n  color: 'silver'\n};\n")),(0,s.kt)("h3",{id:"accessing-object-properties"},"Accessing object properties"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"dot notation"))),(0,s.kt)("p",null,"There are two ways we can access an object\u2019s property. The first way is to use the dot notation. We write the object\u2019s name, followed by the dot operator and then the property name (key). If we try to access a property that does not exist on that object, undefined will be returned. If we try to access a property that does not exist on that object, undefined will be returned."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let spaceship = {\n  homePlanet: 'Earth',\n  color: 'silver',\n  'Fuel Type': 'Turbo Fuel',\n  numCrew: 5,\n  flightPath: ['Venus', 'Mars', 'Saturn']\n};\n\n// Write your code below\n let crewCount = spaceship.numCrew;\n\n let planetArray = spaceship.flightPath;\n\n console.log(crewCount);\n console.log(planetArray);\n\n /* Output:\n  5\n  [ 'Venus', 'Mars', 'Saturn' ]\n */\n")),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"Bracket notation"))),(0,s.kt)("p",null,"The second way to access a keys value is by using the bracket notation, []. To use bracket notation to access an object\u2019s property, we pass in the property name (key) as a string."),(0,s.kt)("p",null,"We must use bracket notation when accessing keys that have numbers, spaces, or special characters in them. Without bracket notation in these situations, our code would throw an error."),(0,s.kt)("p",null,"With bracket notation you can also use a variable inside the brackets to select the keys of an object. This can be especially helpful when working with functions. "),(0,s.kt)("p",null,"Example; "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let returnAnyProp = (objectName, propName) => objectName[propName];\n \nreturnAnyProp(spaceship, 'homePlanet'); // Returns 'Earth'\n")),(0,s.kt)("p",null,"If we tried to write our returnAnyProp() function with dot notation (objectName.propName) the computer would look for a key of 'propName' on our object and not the value of the propName parameter."),(0,s.kt)("h3",{id:"property-assignment"},"Property Assignment"),(0,s.kt)("p",null,"Once we\u2019ve defined an object, we\u2019re not stuck with all the properties we wrote. Objects are mutable meaning we can update them after we create them. We can use either dot notation, ., or bracket notation, [], and the assignment operator, = to add new key-value pairs to an object or change an existing property. "),(0,s.kt)("p",null,"One of two things can happen with property assignment:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"If the property already exists on the object, whatever value it held before will be replaced with the newly assigned value."),(0,s.kt)("li",{parentName:"ol"},"If there was no property with that name, a new property will be added to the object.")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Although we can\u2019t reassign an object declared with const, we can still mutate it, meaning we can add new properties and change the properties that are there."))),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const spaceship = {type: 'shuttle'};\nspaceship = {type: 'alien'}; // TypeError: Assignment to constant variable.\nspaceship.type = 'alien'; // Changes the value of the type property\nspaceship.speed = 'Mach 5'; // Creates a new key of 'speed' with a value of 'Mach 5'\n")),(0,s.kt)("p",null,"We can delete a property from an object with the delete operator."),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const spaceship = {\n  'Fuel Type': 'Turbo Fuel',\n  homePlanet: 'Earth',\n  mission: 'Explore the universe' \n};\n \ndelete spaceship.mission;  // Removes the mission property\n")),(0,s.kt)("h3",{id:"methods"},"Methods"),(0,s.kt)("p",null,"When the data stored on an object is a function we call that a method. A property is what an object has, while a method is what an object does."),(0,s.kt)("p",null,"We can include methods in our object literals by creating ordinary, comma-separated key-value pairs. The key serves as our method\u2019s name, while the value is an anonymous function expression."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const alienShip = {\n  invade: function () { \n    console.log('Hello! We have come to dominate your planet. Instead of Earth, it shall be called New Xaculon.')\n  }\n};\n\n")),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"With the new method syntax introduced in ES6 we can omit the colon and the function keyword."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const alienShip = {\n  invade () { \n    console.log('Hello! We have come to dominate your planet. Instead of Earth, it shall be called New Xaculon.')\n  }\n};\n")),(0,s.kt)("p",null,"Object methods are invoked by appending the object\u2019s name with the dot operator followed by the method name and parentheses. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"alienShip.invade(); // Prints 'Hello! We have come to dominate your planet. Instead of Earth, it shall be called New Xaculon.'\n")),(0,s.kt)("h3",{id:"nested-objects"},"Nested Objects"),(0,s.kt)("p",null,"In application code, objects are often nested, an object might have another object as a property which in turn could have a property that\u2019s an array of even more objects."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const spaceship = {\n     telescope: {\n        yearBuilt: 2018,\n        model: '91031-XLT',\n        focalLength: 2032 \n     },\n    crew: {\n        captain: { \n            name: 'Sandra', \n            degree: 'Computer Engineering', \n            encourageTeam() { console.log('We got this!') } \n         }\n    },\n    engine: {\n        model: 'Nimbus2000'\n     },\n     nanoelectronics: {\n         computer: {\n            terabytes: 100,\n            monitors: 'HD'\n         },\n        'back-up': {\n           battery: 'Lithium',\n           terabytes: 50\n         }\n    }\n}; \n")),(0,s.kt)("p",null,"We can chain operators to access nested properties. We have to pay attention to which operator makes sense to use in each layer. The computer evaluates each expression from left to right."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"spaceship.nanoelectronics['back-up'].battery; // Returns 'Lithium'\n")),(0,s.kt)("p",null,"In the code above;"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"First the computer evaluates spaceship.nanoelectronics, which results in an object containing the back-up and computer objects."),(0,s.kt)("li",{parentName:"ul"},"We accessed the back-up object by appending ","['back-up']","."),(0,s.kt)("li",{parentName:"ul"},"The back-up object has a battery property, accessed with .battery which returned the value stored there: 'Lithium'.")),(0,s.kt)("h3",{id:"pass-by-reference"},"Pass by reference"),(0,s.kt)("p",null,"Objects are passed by reference. This means when we pass a variable assigned to an object into a function as an argument, the computer interprets the parameter name as pointing to the space in memory holding that object. As a result, functions which change object properties actually mutate the object permanently (even when the object is assigned to a const variable)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const spaceship = {\n  homePlanet : 'Earth',\n  color : 'silver'\n};\n \nlet paintIt = obj => {\n  obj.color = 'glorious gold'\n};\n \npaintIt(spaceship);\n \nspaceship.color // Returns 'glorious gold'\n")),(0,s.kt)("p",null,"The function paintIt() permanently changes the color of the spaceship object. But the reassignment of the spaceship variable would not work in the same way."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let spaceship = {\n  homePlanet : 'Earth',\n  color : 'red'\n};\nlet tryReassignment = obj => {\n  obj = {\n    identified : false, \n    'transport type' : 'flying'\n  }\n  console.log(obj) // Prints {'identified': false, 'transport type': 'flying'}\n \n};\ntryReassignment(spaceship) // The attempt at reassignment does not work.\nspaceship // Still returns {homePlanet : 'Earth', color : 'red'};\n \nspaceship = {\n  identified : false, \n  'transport type': 'flying'\n}; // Regular reassignment still works.\n")),(0,s.kt)("p",null,"In the code above;"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We declared this spaceship object with let. This allowed us to reassign it to a new object with identified and 'transport type' properties with no problems."),(0,s.kt)("li",{parentName:"ul"},"When we tried the same thing using a function designed to reassign the object passed into it, the reassignment didn\u2019t stick (even though calling console.log() on the object produced the expected result)."),(0,s.kt)("li",{parentName:"ul"},"When we passed spaceship into that function, obj became a reference to the memory location of the spaceship object, but not to the spaceship variable. This is because the obj parameter of the tryReassignment() function is a variable in its own right. The body of tryReassignment() has no knowledge of the spaceship variable at all!"),(0,s.kt)("li",{parentName:"ul"},"When we did the reassignment in the body of tryReassignment(), the obj variable came to refer to the memory location of the object {'identified' : false, 'transport type' : 'flying'}, while the spaceship variable was completely unchanged from its earlier value. ")),(0,s.kt)("h3",{id:"looping-through-objects"},"Looping through objects"),(0,s.kt)("p",null,"For objects we use the for...in syntax to loop through objects. It wil execute a given block of code for each property in an object. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let spaceship = {\n    crew: {\n    captain: { \n        name: 'Lily', \n        degree: 'Computer Engineering', \n        cheerTeam() { console.log('You got this!') } \n        },\n    'chief officer': { \n        name: 'Dan', \n        degree: 'Aerospace Engineering', \n        agree() { console.log('I agree, captain!') } \n        },\n    medic: { \n        name: 'Clementine', \n        degree: 'Physics', \n        announce() { console.log(`Jets on!`) } },\n    translator: {\n        name: 'Shauna', \n        degree: 'Conservation Science', \n        powerFuel() { console.log('The tank is full!') } \n        }\n    }\n}; \n\nfor (let crewMember in spaceship.crew) {\n  console.log(`${spaceship.crew[crewMember].name} : ${spaceship.crew[crewMember].degree}`);\n}\n/*  Output\nLily : Computer Engineering\nDan : Aerospace Engineering\nClementine : Physics\nShauna : Conservation Science\n*/\n")),(0,s.kt)("p",null,"Our for...in will iterate through each element of the spaceship.crew object. In each iteration, the variable crewMember is set to one of spaceship.crew\u2018s keys, enabling us to log a list of crew members\u2019 name and degree. "),(0,s.kt)("h2",{id:"advanced-objects"},"Advanced objects"),(0,s.kt)("p",null,"Advanced objects are not a different type of object, they are mentioned as advanced, because of the advanced features we can implement to our objects. We can define an object like below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let peson = {\n  name: 'Axel',\n  location: 'US',\n  isAdvsor: true\n}\n")),(0,s.kt)("p",null,"But if we wanted to make more people objects it would easily become cumbersome. So to avoid this we use the advanced features of objects. "),(0,s.kt)("p",null,"An advanced feature we can use is the Factory function and it can purposely be created to make objects. The example below explains more."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const makeCodecademyPeople = (name, location, isAdvisor) => {\n  return {\n    name,\n    location,\n    isAdvisor\n    }\n    };\n};\n\n//now, calling the function will create a new object that we can assign to \n//a variable:\nlet axelAdvisor = makeCodecademyPeople('Axel', 'US', true);\n\nconsole.log(axelAdvisor.name) //Axel\n")),(0,s.kt)("p",null,"What's advanced is the tools that we are learning to improve how we interact and build objects."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"There are 4 ways to create objects: "),(0,s.kt)("ol",{parentName:"div"},(0,s.kt)("li",{parentName:"ol"},"Using object literals,"),(0,s.kt)("li",{parentName:"ol"},"Using factory functions,"),(0,s.kt)("li",{parentName:"ol"},"Using Constructor functions,"),(0,s.kt)("li",{parentName:"ol"},"Using the class keyword (almost similar to creating a function constructor). ")))),(0,s.kt)("h3",{id:"object-literals-for-objects"},"Object literals for objects."),(0,s.kt)("p",null,"Below is an example of how we use object literals to create an object."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const car = {\n  model: 'Nissan',\n  color: 'Green',\n  ['Fuel type']: 'Diesel'\n}\n")),(0,s.kt)("h3",{id:"factory-functions-for-objects"},"Factory functions for objects"),(0,s.kt)("p",null,"A factory function is any function which is not a class or constructor that returns a (presumably new) object. Factory functions have always been attractive in JavaScript because they offer the ability to easily produce object instances without diving into the complexities of classes and the new keyword."),(0,s.kt)("p",null,"Examples;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const monsterFactory = (name, age, energySource, catchPhrase) => {\n  return { \n    name: name,\n    age: age, \n    energySource: energySource,\n    scare() {\n      console.log(catchPhrase);\n    } \n  }\n};\n\nconst ghost = monsterFactory('Ghouly', 251, 'ectoplasm', 'BOO!');\nghost.scare(); // 'BOO!'\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"function createCircle (radius){\n  return{\n  radius,\n  draw: function(){\n    console.log('draw');\n    }\n  }\n};\n\nconst circle = createCircle(1);\ncircle.draw();\n// Output is a circle object with a radius of 1\n")),(0,s.kt)("p",null,"In the code above we can re-use the createCircle function to create several objects dynamically. "),(0,s.kt)("h3",{id:"constructor-functions-for-objects"},"Constructor functions for objects"),(0,s.kt)("p",null,"The naming convention for constructor functions is different, we use the PascalCase and camelCase. We use the 'this' keyword to set the properties of the object instead of returning an object. 'this' is a reference to the object that is executing the code. If we have a new empty object in the memory we use the 'this' keyword to refence it and then the dot notation to set various properties to that object.  "),(0,s.kt)("p",null,"Example;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"function CreateCircle (radius){\n  this.radius = radius;\n  this.draw = function (){\n      console.log('draw');\n  }\n}\n\nconst circle = new CreateCircle(2);\n// The output is going to be a new object with radius and draw method as its properties. \n")),(0,s.kt)("p",null,"In the code above we create a function and then use the this keyword in the function body to set the properties of the object. We also added a method called draw. A method is a function inside another function. "),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Every object in JavaScript has a property called constructor, which references the function that was used to construct or to create that object. To find it, write on the console 'objectname.constructor' and hit return. This will return the function that was used to create that object. "))),(0,s.kt)("p",null,"Examples of built-in JavaScript constructors are;"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"new String(); // Which is called every time we use the string literals ('', \"\", ``)\nnew Boolean(); // true, false. Boolean literals\nnew Number(); // 1, 2, 3, 4... Number literals\n")),(0,s.kt)("p",null,"Objects are collections of related data and functionality. We store that functionality in methods on our objects."),(0,s.kt)("h3",{id:"this-keyword"},"this keyword"),(0,s.kt)("p",null,"The this keyword references the calling object which provides access to the calling object\u2019s properties."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const robot = {\n  model: '1E78V2',\n  energyLevel: 100,\n  provideInfo(){\n    return `I am ${this.model} and my current energy level is ${this.energyLevel}.`\n  }\n};\n\nconsole.log(robot.provideInfo());\n\n// output; I am 1E78V2 and my current energy level is 100.\n")),(0,s.kt)("p",null,"In the example above, the calling object is robot and by using 'this' keyword we\u2019re accessing the robot object itself, and then the provideInfo property of robot by using property dot notation. If we use the 'this' keyword in a method then the value of this is the calling object."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"It is good to avoid using arrow functions when using this in a method! Because when we use the arrow function and the 'this' keyword, it points to a global object and not the calling object."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const goat = {\n  dietType: 'herbivore',\n  makeSound() {\n    console.log('baaa');\n  },\n  diet: () => {\n    console.log(this.dietType);\n  }\n};\n \ngoat.diet(); // Prints undefined\n")),(0,s.kt)("p",null,"In the example above the code does not work as intended because the 'this' keyword in the arrow function points to a globally scoped object and not the goat object. Arrow functions inherently bind, or tie, an already defined 'this' value to the function itself that is NOT the calling object."),(0,s.kt)("h3",{id:"privacy-in-objects"},"Privacy in objects"),(0,s.kt)("p",null,"When discussing privacy in objects, we define it as the idea that only certain properties should be mutable or able to change in value.\nJavaScript developers follow naming conventions that signal to other developers how to interact with a property. One common convention is to place an underscore _ before the name of a property to mean that the property should not be altered."),(0,s.kt)("h3",{id:"getters"},"Getters"),(0,s.kt)("p",null,"Getters are methods that get and return the internal properties of an object. But they can do more than just retrieve the value of a property! "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const person = {\n  _firstName: 'John',\n  _lastName: 'Doe',\n  get fullName() {\n    if (this._firstName && this._lastName){\n      return `${this._firstName} ${this._lastName}`;\n    } else {\n      return 'Missing a first name or a last name.';\n    }\n  }\n}\n \n// To call the getter method: \nperson.fullName; // 'John Doe'\n")),(0,s.kt)("p",null,"In the code above;"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We use the get keyword followed by a function."),(0,s.kt)("li",{parentName:"ul"},"We use an if...else conditional to check if both _firstName and _lastName exist (by making sure they both return truthy values) and then return a different value depending on the result."),(0,s.kt)("li",{parentName:"ul"},"We can access the calling object\u2019s internal properties using this. In fullName, we\u2019re accessing both this._firstName and this._lastName."),(0,s.kt)("li",{parentName:"ul"},"In the last line we call fullName on person. In general, getter methods do not need to be called with a set of parentheses. Syntactically, it looks like we\u2019re accessing a property.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const robot = {\n  _model: '1E78V2',\n  _energyLevel: 100,\n  get energyLevel(){\n    if ( typeof this._energyLevel === 'number'){\n      return 'My current energy level is ' + this._energyLevel\n    } else {\n      return 'System malfunction: cannot retrieve energy level'\n    }\n  }\n};\n\nconsole.log(robot.energyLevel);\n// Output; My current energy level is 100\n")),(0,s.kt)("h3",{id:"advantages-of-using-getter-methods"},"Advantages of using getter methods"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Getters can perform an action on the data when getting a property."),(0,s.kt)("li",{parentName:"ul"},"Getters can return different values using conditionals."),(0,s.kt)("li",{parentName:"ul"},"In a getter, we can access the properties of the calling object using this."),(0,s.kt)("li",{parentName:"ul"},"The functionality of our code is easier for other developers to understand.")),(0,s.kt)("p",null,"Another thing to keep in mind when using getter (and setter) methods is that properties cannot share the same name as the getter/setter function. If we do so, then calling the method will result in an infinite call stack error. One workaround is to add an underscore before the property name like we did in the example above."),(0,s.kt)("h3",{id:"setters"},"Setters"),(0,s.kt)("p",null,"We can also create setter methods which reassign values of existing properties within an object."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const person = {\n  _age: 37,\n  set age(newAge){\n    if (typeof newAge === 'number'){\n      this._age = newAge;\n    } else {\n      console.log('You must assign a number to age');\n    }\n  }\n};\n")),(0,s.kt)("p",null,"In the example above;"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We can perform a check for what value is being assigned to this._age."),(0,s.kt)("li",{parentName:"ul"},"When we use the setter method, only values that are numbers will reassign this._age"),(0,s.kt)("li",{parentName:"ul"},"There are different outputs depending on what values are used to reassign this._age.")),(0,s.kt)("p",null,"Then to use the setter method,"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"person.age = 40;\nconsole.log(person._age); // Logs: 40\nperson.age = '40'; // Logs: You must assign a number to age\n")))}p.isMDXComponent=!0}}]);